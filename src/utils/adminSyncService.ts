// Servi√ßo de Sincroniza√ß√£o Autom√°tica para Configura√ß√µes Administrativas
// Monitora e sincroniza configura√ß√µes em tempo real entre todas as inst√¢ncias

import { adminConfigManager, AdminConfig } from './adminConfigManager';

interface SyncEvent {
  type: 'config_update' | 'config_reset' | 'config_import';
  timestamp: number;
  source: string;
  data?: Partial<AdminConfig>;
}

class AdminSyncService {
  private isActive: boolean = false;
  private syncChannel: BroadcastChannel | null = null;
  private storageListener: ((e: StorageEvent) => void) | null = null;
  private visibilityListener: (() => void) | null = null;
  private heartbeatTimer: number | null = null;
  private lastSyncTime: number = 0;
  
  private readonly CHANNEL_NAME = 'eagleboost_admin_sync';
  private readonly HEARTBEAT_INTERVAL = 30000; // 30 segundos
  private readonly SYNC_DEBOUNCE = 1000; // 1 segundo

  constructor() {
    console.log('üîÑ AdminSyncService: Inicializando servi√ßo de sincroniza√ß√£o...');
    this.initialize();
  }

  /**
   * Inicializa o servi√ßo de sincroniza√ß√£o
   */
  private initialize(): void {
    if (typeof window === 'undefined') {
      console.warn('‚ö†Ô∏è AdminSyncService: Window n√£o dispon√≠vel, sincroniza√ß√£o desabilitada');
      return;
    }

    this.setupBroadcastChannel();
    this.setupStorageListener();
    this.setupVisibilityListener();
    this.setupHeartbeat();
    this.isActive = true;
    
    console.log('‚úÖ AdminSyncService: Servi√ßo inicializado com sucesso');
  }

  /**
   * Configura BroadcastChannel para comunica√ß√£o entre abas/janelas
   */
  private setupBroadcastChannel(): void {
    try {
      this.syncChannel = new BroadcastChannel(this.CHANNEL_NAME);
      
      this.syncChannel.onmessage = (event) => {
        this.handleSyncMessage(event.data as SyncEvent);
      };
      
      console.log('üì° AdminSyncService: BroadcastChannel configurado');
    } catch (error) {
      console.warn('‚ö†Ô∏è AdminSyncService: BroadcastChannel n√£o suportado:', error);
    }
  }

  /**
   * Configura listener para mudan√ßas no localStorage
   */
  private setupStorageListener(): void {
    this.storageListener = (event: StorageEvent) => {
      if (event.key && event.key.includes('eagleboost_admin_config')) {
        console.log('üì• AdminSyncService: Mudan√ßa detectada no localStorage:', event.key);
        this.debouncedSync();
      }
    };
    
    window.addEventListener('storage', this.storageListener);
    console.log('üëÇ AdminSyncService: Storage listener configurado');
  }

  /**
   * Configura listener para mudan√ßas de visibilidade da p√°gina
   */
  private setupVisibilityListener(): void {
    this.visibilityListener = () => {
      if (!document.hidden) {
        console.log('üëÅÔ∏è AdminSyncService: P√°gina ficou vis√≠vel, sincronizando...');
        this.forcSync();
      }
    };
    
    document.addEventListener('visibilitychange', this.visibilityListener);
    console.log('üëÅÔ∏è AdminSyncService: Visibility listener configurado');
  }

  /**
   * Configura heartbeat para sincroniza√ß√£o peri√≥dica
   */
  private setupHeartbeat(): void {
    this.heartbeatTimer = window.setInterval(() => {
      this.performHeartbeat();
    }, this.HEARTBEAT_INTERVAL);
    
    console.log(`üíì AdminSyncService: Heartbeat configurado (${this.HEARTBEAT_INTERVAL}ms)`);
  }

  /**
   * Executa heartbeat - sincroniza√ß√£o peri√≥dica
   */
  private performHeartbeat(): void {
    if (!this.isActive) return;
    
    console.log('üíì AdminSyncService: Executando heartbeat...');
    
    // For√ßa sincroniza√ß√£o do adminConfigManager
    adminConfigManager.forcSync();
    
    // Envia ping para outras inst√¢ncias
    this.broadcastSync({
      type: 'config_update',
      timestamp: Date.now(),
      source: this.getInstanceId()
    });
  }

  /**
   * Sincroniza√ß√£o com debounce para evitar chamadas excessivas
   */
  private debouncedSync = this.debounce(() => {
    this.forcSync();
  }, this.SYNC_DEBOUNCE);

  /**
   * Fun√ß√£o de debounce
   */
  private debounce<T extends (...args: any[]) => any>(
    func: T,
    wait: number
  ): (...args: Parameters<T>) => void {
    let timeout: number;
    return (...args: Parameters<T>) => {
      window.clearTimeout(timeout);
      timeout = window.setTimeout(() => func(...args), wait);
    };
  }

  /**
   * Manipula mensagens de sincroniza√ß√£o recebidas
   */
  private handleSyncMessage(syncEvent: SyncEvent): void {
    const now = Date.now();
    
    // Ignora mensagens muito antigas (mais de 5 minutos)
    if (now - syncEvent.timestamp > 5 * 60 * 1000) {
      console.log('‚è∞ AdminSyncService: Mensagem muito antiga ignorada');
      return;
    }
    
    // Ignora mensagens da pr√≥pria inst√¢ncia
    if (syncEvent.source === this.getInstanceId()) {
      return;
    }
    
    console.log('üì® AdminSyncService: Mensagem de sincroniza√ß√£o recebida:', syncEvent.type);
    
    switch (syncEvent.type) {
      case 'config_update':
        this.handleConfigUpdate(syncEvent);
        break;
      case 'config_reset':
        this.handleConfigReset();
        break;
      case 'config_import':
        this.handleConfigImport(syncEvent);
        break;
    }
  }

  /**
   * Manipula atualiza√ß√£o de configura√ß√£o
   */
  private handleConfigUpdate(syncEvent: SyncEvent): void {
    // For√ßa sincroniza√ß√£o do adminConfigManager
    adminConfigManager.forcSync();
    
    console.log('üîÑ AdminSyncService: Configura√ß√£o sincronizada via broadcast');
  }

  /**
   * Manipula reset de configura√ß√£o
   */
  private handleConfigReset(): void {
    console.log('üîÑ AdminSyncService: Reset de configura√ß√£o detectado');
    adminConfigManager.forcSync();
  }

  /**
   * Manipula importa√ß√£o de configura√ß√£o
   */
  private handleConfigImport(syncEvent: SyncEvent): void {
    console.log('üì• AdminSyncService: Importa√ß√£o de configura√ß√£o detectada');
    adminConfigManager.forcSync();
  }

  /**
   * Transmite evento de sincroniza√ß√£o
   */
  private broadcastSync(syncEvent: SyncEvent): void {
    if (!this.syncChannel) return;
    
    try {
      this.syncChannel.postMessage(syncEvent);
      console.log('üì° AdminSyncService: Evento transmitido:', syncEvent.type);
    } catch (error) {
      console.error('‚ùå AdminSyncService: Erro ao transmitir evento:', error);
    }
  }

  /**
   * Obt√©m ID √∫nico da inst√¢ncia
   */
  private getInstanceId(): string {
    if (!(window as any).eagleboostInstanceId) {
      (window as any).eagleboostInstanceId = `instance_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    return (window as any).eagleboostInstanceId;
  }

  // ========== M√âTODOS P√öBLICOS ==========

  /**
   * For√ßa sincroniza√ß√£o imediata
   */
  forcSync(): void {
    if (!this.isActive) return;
    
    const now = Date.now();
    
    // Evita sincroniza√ß√µes muito frequentes
    if (now - this.lastSyncTime < 500) {
      console.log('‚è±Ô∏è AdminSyncService: Sincroniza√ß√£o muito frequente, ignorando');
      return;
    }
    
    this.lastSyncTime = now;
    
    console.log('üîÑ AdminSyncService: Sincroniza√ß√£o for√ßada iniciada');
    
    // For√ßa sincroniza√ß√£o do adminConfigManager
    adminConfigManager.forcSync();
    
    // Notifica outras inst√¢ncias
    this.broadcastSync({
      type: 'config_update',
      timestamp: now,
      source: this.getInstanceId()
    });
  }

  /**
   * Notifica sobre atualiza√ß√£o de configura√ß√£o
   */
  notifyConfigUpdate(updates: Partial<AdminConfig>): void {
    console.log('üì¢ AdminSyncService: Notificando atualiza√ß√£o de configura√ß√£o');
    
    this.broadcastSync({
      type: 'config_update',
      timestamp: Date.now(),
      source: this.getInstanceId(),
      data: updates
    });
  }

  /**
   * Notifica sobre reset de configura√ß√£o
   */
  notifyConfigReset(): void {
    console.log('üì¢ AdminSyncService: Notificando reset de configura√ß√£o');
    
    this.broadcastSync({
      type: 'config_reset',
      timestamp: Date.now(),
      source: this.getInstanceId()
    });
  }

  /**
   * Notifica sobre importa√ß√£o de configura√ß√£o
   */
  notifyConfigImport(): void {
    console.log('üì¢ AdminSyncService: Notificando importa√ß√£o de configura√ß√£o');
    
    this.broadcastSync({
      type: 'config_import',
      timestamp: Date.now(),
      source: this.getInstanceId()
    });
  }

  /**
   * Ativa o servi√ßo de sincroniza√ß√£o
   */
  activate(): void {
    if (this.isActive) return;
    
    console.log('üü¢ AdminSyncService: Ativando servi√ßo...');
    this.initialize();
  }

  /**
   * Desativa o servi√ßo de sincroniza√ß√£o
   */
  deactivate(): void {
    if (!this.isActive) return;
    
    console.log('üî¥ AdminSyncService: Desativando servi√ßo...');
    
    this.isActive = false;
    
    // Remove listeners
    if (this.storageListener) {
      window.removeEventListener('storage', this.storageListener);
      this.storageListener = null;
    }
    
    if (this.visibilityListener) {
      document.removeEventListener('visibilitychange', this.visibilityListener);
      this.visibilityListener = null;
    }
    
    // Limpa timers
    if (this.heartbeatTimer) {
      window.clearInterval(this.heartbeatTimer);
      this.heartbeatTimer = null;
    }
    
    // Fecha canal
    if (this.syncChannel) {
      this.syncChannel.close();
      this.syncChannel = null;
    }
    
    console.log('‚úÖ AdminSyncService: Servi√ßo desativado');
  }

  /**
   * Obt√©m status do servi√ßo
   */
  getStatus(): {
    isActive: boolean;
    hasChannel: boolean;
    instanceId: string;
    lastSyncTime: Date;
  } {
    return {
      isActive: this.isActive,
      hasChannel: !!this.syncChannel,
      instanceId: this.getInstanceId(),
      lastSyncTime: new Date(this.lastSyncTime)
    };
  }

  /**
   * Destructor
   */
  destroy(): void {
    console.log('üîß AdminSyncService: Destruindo servi√ßo...');
    this.deactivate();
  }
}

// Inst√¢ncia global do servi√ßo de sincroniza√ß√£o
export const adminSyncService = new AdminSyncService();

// Integra√ß√£o desabilitada para manter configura√ß√µes do usu√°rio
// Comentado para evitar sincroniza√ß√µes autom√°ticas indesejadas
/*
if (typeof window !== 'undefined') {
  // Intercepta m√©todos do adminConfigManager para notificar sincroniza√ß√£o
  const originalUpdateConfig = adminConfigManager.updateConfig.bind(adminConfigManager);
  const originalResetToDefault = adminConfigManager.resetToDefault.bind(adminConfigManager);
  const originalImportConfig = adminConfigManager.importConfig.bind(adminConfigManager);
  
  adminConfigManager.updateConfig = function(updates: Partial<AdminConfig>) {
    originalUpdateConfig(updates);
    adminSyncService.notifyConfigUpdate(updates);
  };
  
  adminConfigManager.resetToDefault = function() {
    originalResetToDefault();
    adminSyncService.notifyConfigReset();
  };
  
  adminConfigManager.importConfig = function(jsonConfig: string): boolean {
    const result = originalImportConfig(jsonConfig);
    if (result) {
      adminSyncService.notifyConfigImport();
    }
    return result;
  };
  
  // Disponibiliza globalmente para debug
  (window as any).adminSyncService = adminSyncService;
}
*/

export default adminSyncService;